@page
@using LookOn.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Options
@using Owl.reCAPTCHA
@using Volo.Abp.Account.Localization
@using Volo.Abp.Account.Public.Web.Security.Recaptcha
@using Volo.Abp.Account.Settings
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Alert
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Button
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Card
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Form
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Grid
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Lepton.Themes.Lepton.Components.Content.Alerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.Settings
@model LookOn.Pages.Account.CustomLoginModel
@inject IHtmlLocalizer<AccountResource> L
@inject IHtmlLocalizer<LookOnResource> Lv
@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout
@inject ISettingProvider SettingProvider
@{
    PageLayout.Content.Title = L["Login"].Value;
    var reCaptchaVersion = await SettingProvider.GetAsync<int>(AccountSettingNames.Captcha.Version);
    if (Model.UseCaptcha)
    {
        await Model.ReCaptchaOptions.SetAsync(reCaptchaVersion == 3 ? reCAPTCHAConsts.V3 : reCAPTCHAConsts.V2);
    }

}

@section scripts
{
    <abp-script src="/Pages/Account/Login.js"/>
    @if (Model.UseCaptcha)
    {
        if (reCaptchaVersion == 3)
        {
            <recaptcha-script-v3/>
            <recaptcha-script-v3-js action="login" callback="(function(){$('#@RecaptchaValidatorBase.RecaptchaResponseKey').val(token)})"/>
        }
        else
        {
            <recaptcha-script-v2/>
        }
    }
}

@if (Model.IsLinkLogin)
{
    <abp-alert alert-type="Warning">
        @L["LinkAccountWarning", Url.PageLink()]
    </abp-alert>
}
<div class="account-module-form login-form-custom">
    @if (Model.EnableLocalLogin)
    {
        <form method="post">
            @if (Model.UseCaptcha)
            {
                <input type="hidden" name="@RecaptchaValidatorBase.RecaptchaResponseKey" id="@RecaptchaValidatorBase.RecaptchaResponseKey"/>
            }
            <div class="text-center login-title-custom mb-5">@Lv["Login"]</div>
            <abp-input class="mt-4 border-custom" asp-for="LoginInput.UserNameOrEmailAddress" placeholder="@Lv["UserNameOrEmailAddress"]" suppress-label="true" required-symbol="false" style="height: 45px;"/>
            @* <abp-input class="mt-4 border-custom" asp-for="LoginInput.Password" placeholder="@Lv["Password"]" suppress-label="true" required-symbol="false" style="height: 45px"/> *@
            <div class="mb-3">
                <input type="password" data-val="true" placeholder="@Lv["Password"]" asp-for="LoginInput.Password" class="form-control border-custom" style="display: inline;min-height: 45px"/>
                <i style="margin-left: -30px;cursor: pointer;" class="bi bi-eye-slash" id="togglePassword"></i>
                <span asp-validation-for="LoginInput.Password" class="text-danger"></span>
            </div>
            <abp-row>
                <abp-column>
                    <abp-input asp-for="LoginInput.RememberMe" class="mb-4 border-custom" style="border-radius: 6px;"/>
                </abp-column>
                <abp-column class="text-newValue" style="text-align: right;">
                    <a href="@Url.Page("./ForgotPassword", new { returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash })">@L["ForgotPassword"]</a>
                </abp-column>
            </abp-row>

            @if (reCaptchaVersion == 2)
            {
                <recaptcha-div-v2 callback="(function(){$('#@RecaptchaValidatorBase.RecaptchaResponseKey').val(token)})"/>
            }

            <div class="d-grid gap-2">
                <abp-button type="submit" class="mb-3 btn LookOn-btn-primary login-btn-custom" style="background: linear-gradient(180deg, #4779FA 0%, #3834EF 100%);" name="Action" value="Login">
                    @L["Login"]
                    <i class="lo-btn-right-icon" style="float: right;margin-top: 2px;"></i>
                </abp-button>
            </div>

            @if (Model.ShowCancelButton)
            {
                <div class="d-grid gap-2">
                    <abp-button button-type="Secondary" type="submit" formnovalidate="formnovalidate" class="mb-3" name="Action" value="Cancel">@L["Cancel"]</abp-button>
                </div>
            }
        </form>
                                @*     if (Model.IsSelfRegistrationEnabled) *@
                                @*     { *@
                                @*         @L["NotAMemberYet"] *@
                                @*         <a href="@Url.Page("./Register", new { returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash })">@L["Register"]</a> *@
                                @*     } *@
    }
    @if (Model.VisibleExternalProviders.Any())
    {
        <div class="text-center">@L["OrSignInWith"]</div>

        <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
            @foreach (var provider in Model.VisibleExternalProviders)
            {
                <abp-button
                    style="width:100%"
                    type="submit"
                    class="mt-2 me-2 btn btn-primary-custom login-btn-custom"
                    name="provider"
                    value="@provider.AuthenticationScheme"
                    data-busy-text="@L["ProcessingWithThreeDot"]">
                    @if (provider.Icon != null)
                    {
                        <i class="@provider.Icon"></i>
                    }
                    <span>@Lv["SignInWithHaravan"]</span>
                    <i class="lo-btn-right-icon" style="float: right;margin-top: 2px;"></i>
                </abp-button>
            }
        </form>
    }
    <div class="text-center mt-5">
        <a style="text-decoration: none" href="https://lookon.vn" target="_blank">
            <i class="lo-contract-icon"></i>
            <span>&nbsp; &nbsp;@Lv["Contact"]</span>
        </a>

    </div>

    @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
    {
        <div class="alert alert-warning">
            <strong>Invalid login request</strong>
            There are no login schemes configured for this client.
        </div>
    }
</div>