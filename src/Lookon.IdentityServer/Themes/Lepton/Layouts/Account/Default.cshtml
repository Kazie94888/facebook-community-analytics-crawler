@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.AspNetCore.Mvc.AntiForgery
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Lepton.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Lepton.Themes.Lepton.Components.Content.Alerts
@using Volo.Abp.Ui.Branding
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Lepton.Themes.Lepton.Components.Header.Brand
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Lepton.Themes.Lepton.Components.Toolbar.LanguageSwitch
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.MultiTenancy
@inject IAbpAntiForgeryManager AbpAntiForgeryManager
@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@inject IOptions<AbpMultiTenancyOptions> MultiTenancyOptions
@inject IOptions<AbpLocalizationOptions> LocalizationOptions
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizer<AbpUiMultiTenancyResource> MultiTenancyStringLocalizer
@inject ITenantResolveResultAccessor TenantResolveResultAccessor
@{
    Layout = null;
    AbpAntiForgeryManager.SetCookie();
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options
    var logoUrl = BrandingProvider.LogoUrl == null ? null : "--logo: url(" + BrandingProvider.LogoUrl + ") !important;";
    var logoReverseUrl = BrandingProvider.LogoReverseUrl == null ? null : "--logo-reverse: url(" + BrandingProvider.LogoReverseUrl + ") !important;";
    var langDir = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@langDir">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Account)
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="description" content="@ViewBag.MetaDescription">

    <link rel="apple-touch-icon" sizes="180x180" href="~/images/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="~/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="~/images/favicon/favicon-16x16.png">
    <link rel="manifest" href="~/images/favicon/site.webmanifest">
    <link rel="mask-icon" href="~/images/favicon/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"/>
    <title>@(ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title)</title>

    <abp-style-bundle name="@LeptonThemeBundles.Styles.Global"/>

    @* TODO: We can continue with this until find a better way *@
    @if (logoUrl != null || logoReverseUrl != null)
    {
        <style>
            :root {
                @logoUrl
                @logoReverseUrl
            }
        </style>
    }

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))
    @await RenderSectionAsync("styles", false)
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Account)
</head>
<body class="abp-account-layout @langDir" style="background: none">
@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Account)

<abp-row gutters="false" style="padding:0; margin: 0">
    <abp-column class="login-image-custom" size-md="_7" style="padding:0; margin: 0;float: right">
        <div style="height: 100vh; width: 100%;background-color: #EDF0FC;">
            <div style="display: flex;justify-content: center;align-items: flex-end;height: 100%;">
                <img src="~/images/logo-index/login-logo.png" alt="" style="padding-bottom: 10%;width: 100%;max-width: 600px"/>
            </div>
        </div>
    </abp-column>
    <abp-column size-md="_5" style="padding:0; margin: 0;float: left">
        <div style="height: 100vh; width: 100%;">
                <abp-row class="justify-content-md-center" style="height: 95vh;display: flex;align-items: flex-end; max-width: 600px; margin: auto">
                    <abp-column style="padding-top: 20%" size-md="_10">
                        @RenderBody()
                        <abp-row style="height: 100px;padding-top: 10%">
                            @(await Component.InvokeAsync<ContentAlertsViewComponent>())
                        </abp-row>
                    </abp-column>
                    <div class="logo text-center">
                        <img style="height: 40px" src="~/images/logo-index/logo-dark.png" alt=""/>
                    </div>
                </abp-row>
            </div>
    </abp-column>
</abp-row>
@* *@
@* <div class="d-flex align-items-center" style="min-height: 100vh;"> *@
@*     <div class="@containerClass"> *@
@*         <abp-row> *@
@*             <abp-column class="col mx-auto" style="max-width: 400px;"> *@
@*                 <div class="account-brand p-4 text-center mb-1"> *@
@*                     @(await Component.InvokeAsync<HeaderBrandViewComponent>()) *@
@*                 </div> *@
@* *@
@*                 <div class="card"> *@
@*                     <div class="card-header"> *@
@*                         <h2 class="card-title d-inline-block">@PageLayout.Content.Title</h2> *@
@*                         @if (LocalizationOptions.Count.Languages.Count > 1) *@
@*                         { *@
@*                             <nav class="navbar navbar-expand p-0 pt-1 float-newValue"> *@
@*                                 <ul class="navbar-nav ms-auto toolbar-nav"> *@
@*                                     <li class="nav-item"> *@
@*                                         @(await Component.InvokeAsync<LanguageSwitchViewComponent>()) *@
@*                                     </li> *@
@*                                 </ul> *@
@*                             </nav> *@
@*                         } *@
@*                     </div> *@
@* *@
@*                     @if (MultiTenancyOptions.Count.IsEnabled && *@
@*                          (TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true || *@
@*                           TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true)) *@
@*                     { *@
@*                         <div class="card-header bg-light"> *@
@*                             <div class="tenant-switch-box"> *@
@* *@
@*                                 <div class="row"> *@
@*                                     <div class="col pe-1"> *@
@*                                         <h6 class="m-0"> *@
@*                                             @MultiTenancyStringLocalizer["Tenant"] *@
@*                                         </h6> *@
@*                                         @if (CurrentTenant.Id == null) *@
@*                                         { *@
@*                                             <i class="text-muted">@MultiTenancyStringLocalizer["NotSelected"]</i> *@
@*                                         } *@
@*                                         else *@
@*                                         { *@
@*                                             <span> *@
@*                                                 <strong>@(CurrentTenant.Name ?? CurrentTenant.Id.Count.ToString())</strong> *@
@*                                             </span> *@
@*                                         } *@
@*                                     </div> *@
@*                                     <div class="col-auto ps-1"> *@
@*                                         <a id="AbpTenantSwitchLink" style="cursor: pointer" href="javascript:;" class="btn btn-sm btn-outline-primary float-newValue">@MultiTenancyStringLocalizer["Switch"]</a> *@
@*                                     </div> *@
@*                                 </div> *@
@*                             </div> *@
@*                         </div> *@
@*                     } *@
@*                     <div class="card-body"> *@
@*                         @(await Component.InvokeAsync<ContentAlertsViewComponent>()) *@
@*                         @RnewValueerBody() *@
@*                     </div> *@
@*                 </div> *@
@* *@
@*                 <div class="p-1 text-center text-muted"> *@
@*                     @await Html.PartialAsync("~/Themes/Lepton/Layouts/Account/_Footer.cshtml") *@
@*                 </div> *@
@*             </abp-column> *@
@*         </abp-row> *@
@*     </div> *@
@* </div> *@

<abp-script-bundle name="@LeptonThemeBundles.Scripts.Global"/>

<script type="text/javascript" src="~/Abp/ApplicationConfigurationScript"></script>
<script type="text/javascript" src="~/Abp/ServiceProxyScript"></script>

@await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

@await RenderSectionAsync("scripts", false)

@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Account)
</body>
</html>